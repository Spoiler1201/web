import sys
import re
from PyQt5.QtWidgets import QApplication, QMainWindow, QTextEdit, QAction, QFileDialog, QMessageBox, QWidget, QVBoxLayout, QLineEdit, QPushButton, QDialog, QLabel
from PyQt5.QtGui import QFont, QSyntaxHighlighter, QTextCharFormat, QColor, QTextCursor
class CNCEditor(QMainWindow):
    def __init__(self):
        super().__init__()

        # F≈ë widget √©s layout
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)

        # Sz√∂vegszerkeszt≈ë l√©trehoz√°sa
        self.text_edit = QTextEdit(self)
        self.text_edit.setFont(QFont("Courier", 12, QFont.Bold))  # Monospace bet≈±t√≠pus
        layout.addWidget(self.text_edit)

        # Szintaxiskiemel≈ë bekapcsol√°sa
        self.highlighter = CNCHighlighter(self.text_edit.document())

        # üî• H√°tt√©rsz√≠n √©s sz√∂veg sz√≠n be√°ll√≠t√°sa
        self.setStyleSheet("background-color: #2E2E2E; color: #E0E0E0;")
        self.text_edit.setStyleSheet("background-color: #2E2E2E; color: #E0E0E0; border: none;")

        # Men√º l√©trehoz√°sa
        menu = self.menuBar()

        # F√°jl men√º
        file_menu = menu.addMenu("F√°jl")


        # Megnyit√°s gomb
        open_action = QAction("Megnyit√°s", self)
        open_action.triggered.connect(self.open_file)
        file_menu.addAction(open_action)

        # Ment√©s gomb
        save_action = QAction("Ment√©s", self)
        save_action.triggered.connect(self.save_file)
        file_menu.addAction(save_action)

        # Szerkeszt√©s men√º
        edit_menu = menu.addMenu("Szerkeszt√©s")

        self.line_numbering_enabled = False  # Alap√©rtelmez√©sben kikapcsolva

        toggle_numbers_action = QAction("Sorsz√°moz√°s be/ki", self)
        toggle_numbers_action.triggered.connect(self.toggle_line_numbers)
        edit_menu.addAction(toggle_numbers_action)

        toggle_theme_action = QAction("√âjszakai/Nappali m√≥d", self)
        toggle_theme_action.triggered.connect(self.toggle_theme)
        edit_menu.addAction(toggle_theme_action)

        # Swap men√ºpont hozz√°ad√°sa
        swap_action = QAction("Swap", self)
        swap_action.triggered.connect(self.open_swap_dialog)
        edit_menu.addAction(swap_action)

        #Nyelvek
        self.languages = {
            "hu": {"file": "F√°jl", "edit": "Szerkeszt√©s", "open": "Megnyit√°s", "save": "Ment√©s", "swap": "Swap",
                   "numbering": "Sorsz√°moz√°s be/ki"},
            "en": {"file": "File", "edit": "Edit", "open": "Open", "save": "Save", "swap": "Swap",
                   "numbering": "Toggle Line Numbers"},
            "nl": {"file": "Bestand", "edit": "Bewerken", "open": "Openen", "save": "Opslaan", "swap": "Wisselen",
                   "numbering": "Regelnummering aan/uit"},
        }
        self.current_language = "hu"

        lang_menu = menu.addMenu("Languages")
        hu_action = QAction("Magyar", self)
        en_action = QAction("English", self)
        nl_action = QAction("Nederlands", self)

        hu_action.triggered.connect(lambda: self.set_language("hu"))
        en_action.triggered.connect(lambda: self.set_language("en"))
        nl_action.triggered.connect(lambda: self.set_language("nl"))

        lang_menu.addAction(hu_action)
        lang_menu.addAction(en_action)
        lang_menu.addAction(nl_action)

        # Ablak be√°ll√≠t√°sok
        self.setWindowTitle("Cnc Coder by Spoiler")
        self.resize(800, 600)

        self.dark_mode = True  # Alap√©rtelmez√©sben s√∂t√©t m√≥d

        self.dark_theme = """
            background-color: #2E2E2E;
            color: #E0E0E0;
        """

        self.light_theme = """
            background-color: #FFFFFF;
            color: #000000;
        """
        self.recent_files = []

    def open_swap_dialog(self):
        """Megnyitja a Swap ablakot"""
        dialog = SwapDialog(self)
        dialog.exec_()

    def open_file(self):
        file_name, _ = QFileDialog.getOpenFileName(self, "F√°jl megnyit√°sa", "",
                                                   "G-k√≥d f√°jlok (*.nc *.gcode *.hyu);;Minden f√°jl (*.*)")
        if file_name:
            with open(file_name, "r") as file:
                self.text_edit.setText(file.read())
            self.setWindowTitle(f"CNC Coder by Spoiler - {file_name.split('/')[-1]}")

            # üìå Hozz√°adjuk a list√°hoz
            if file_name not in self.recent_files:
                self.recent_files.insert(0, file_name)
            if len(self.recent_files) > 5:
                self.recent_files.pop()

            self.update_recent_files_menu()

    def update_recent_files_menu(self):
        """Friss√≠ti a legut√≥bb megnyitott f√°jlok list√°j√°t a men√ºben"""
        self.recent_files_menu.clear()
        for file_name in self.recent_files:
            action = QAction(file_name, self)
            action.triggered.connect(lambda checked, f=file_name: self.load_recent_file(f))
            self.recent_files_menu.addAction(action)

    def load_recent_file(self, file_name):
        """Megnyit egy kor√°bban megnyitott f√°jlt"""
        with open(file_name, "r") as file:
            self.text_edit.setText(file.read())
        self.setWindowTitle(f"CNC Coder by Spoiler - {file_name.split('/')[-1]}")


    def toggle_theme(self):
        """V√°lt√°s √©jszakai √©s nappali m√≥d k√∂z√∂tt"""
        self.dark_mode = not self.dark_mode

        if self.dark_mode:
            self.setStyleSheet(self.dark_theme)
            self.text_edit.setStyleSheet(self.dark_theme + "border: none;")
        else:
            self.setStyleSheet(self.light_theme)
            self.text_edit.setStyleSheet(self.light_theme + "border: none;")

    def open_file(self):
        file_name, _ = QFileDialog.getOpenFileName(self, "F√°jl megnyit√°sa", "",
                                                   "G-k√≥d f√°jlok (*.nc *.gcode *.hyu);;Minden f√°jl (*.*)")
        if file_name:
            with open(file_name, "r") as file:
                self.text_edit.setText(file.read())
            self.setWindowTitle(f"CNC Coder by Spoiler - {file_name.split('/')[-1]}")  # üî• C√≠m friss√≠t√©se


    def save_file(self):
        file_name, _ = QFileDialog.getSaveFileName(self, "F√°jl ment√©se", "",
                                                   "G-k√≥d f√°jlok (*.nc *.gcode *.hyu);;Minden f√°jl (*.*)")
        if file_name:
            with open(file_name, "w") as file:
                file.write(self.text_edit.toPlainText())
            self.setWindowTitle(f"CNC Coder by Spoiler - {file_name.split('/')[-1]}")  # üî• C√≠m friss√≠t√©se)

        if file_name:
            lines = self.text_edit.toPlainText().upper().split("\n")  # üí° Ment√©s nagybet≈±sen

            # Ellen≈ërizz√ºk, hogy az els≈ë sor megfelel≈ë-e (pl. O1234%)
            if not re.match(r"^O\d+%$", lines[0].strip()):
                QMessageBox.warning(self, "Hiba", "A program neve k√∂telez≈ë (pl. O1234%)!")
                return

            # EOB (;) minden sor v√©g√©re
            new_lines = [line.strip() + ";" if not line.strip().endswith(";") else line.strip() for line in lines]

            # M30 ut√°n tegy√ºnk egy "%"-ot
            if "M30" in new_lines[-1]:
                new_lines.append("%")

            # üìå F√°jl ment√©se
            with open(file_name, "w") as file:
                file.write("\n".join(new_lines))

    def insert_line_numbers(self):
        """Sorsz√°moz√°s beilleszt√©se minden sor elej√©re"""
        text = self.text_edit.toPlainText()
        lines = text.split("\n")

        # Megjegyezz√ºk a kurzor poz√≠ci√≥j√°t
        cursor = self.text_edit.textCursor()
        position = cursor.position()

        # √öjrasz√°mozott sorok
        new_lines = [f"N{index + 1} {line}" if not line.strip().startswith("N") else line for index, line in
                     enumerate(lines)]
        self.text_edit.setPlainText("\n".join(new_lines))

        # Vissza√°ll√≠tjuk a kurzort az eredeti helyre
        cursor.setPosition(position)
        self.text_edit.setTextCursor(cursor)

    def toggle_line_numbers(self):
        """Be- vagy kikapcsolja a sorsz√°moz√°st"""
        self.line_numbering_enabled = not self.line_numbering_enabled
        if self.line_numbering_enabled:
            self.insert_line_numbers()
        else:
            # Elt√°vol√≠tjuk a sorsz√°moz√°st
            text = self.text_edit.toPlainText()
            new_lines = [re.sub(r"^N\d+\s*", "", line) for line in text.split("\n")]
            self.text_edit.setPlainText("\n".join(new_lines))

    def set_language(self, lang):
        """Be√°ll√≠tja a nyelvet"""
        self.current_language = lang
        self.menuBar().clear()

        menu = self.menuBar()
        file_menu = menu.addMenu(self.languages[lang]["file"])
        edit_menu = menu.addMenu(self.languages[lang]["edit"])
        lang_menu = menu.addMenu("Languages")

        # √öj men√ºelemek
        open_action = QAction(self.languages[lang]["open"], self)
        open_action.triggered.connect(self.open_file)
        file_menu.addAction(open_action)

        save_action = QAction(self.languages[lang]["save"], self)
        save_action.triggered.connect(self.save_file)
        file_menu.addAction(save_action)

        swap_action = QAction(self.languages[lang]["swap"], self)
        swap_action.triggered.connect(self.open_swap_dialog)
        edit_menu.addAction(swap_action)

        toggle_numbers_action = QAction(self.languages[lang]["numbering"], self)
        toggle_numbers_action.triggered.connect(self.toggle_line_numbers)
        edit_menu.addAction(toggle_numbers_action)

        # Nyelvv√°lt√≥ men√º visszahelyez√©se
        hu_action = QAction("Magyar", self)
        en_action = QAction("English", self)
        nl_action = QAction("Nederlands", self)

        hu_action.triggered.connect(lambda: self.set_language("hu"))
        en_action.triggered.connect(lambda: self.set_language("en"))
        nl_action.triggered.connect(lambda: self.set_language("nl"))

        lang_menu.addAction(hu_action)
        lang_menu.addAction(en_action)
        lang_menu.addAction(nl_action)

    def closeEvent(self, event):
        reply = QMessageBox.question(self, "Kil√©p√©s", "Biztosan kil√©psz ment√©s n√©lk√ºl?",
                                     QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if reply == QMessageBox.Yes:
            event.accept()
        else:
            event.ignore()

class SwapDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Sz√∂vegcsere (Swap)")
        self.resize(300, 150)

        layout = QVBoxLayout()

        # In mez≈ë (keresend≈ë sz√∂veg)
        self.in_label = QLabel("In (keresend≈ë):")
        layout.addWidget(self.in_label)
        self.in_field = QLineEdit()
        layout.addWidget(self.in_field)

        # Out mez≈ë (csere)
        self.out_label = QLabel("Out (csere):")
        layout.addWidget(self.out_label)
        self.out_field = QLineEdit()
        layout.addWidget(self.out_field)

        # Swap gomb
        self.swap_button = QPushButton("Cser√©l√©s")
        self.swap_button.clicked.connect(self.swap_text)
        layout.addWidget(self.swap_button)

        self.setLayout(layout)

    def swap_text(self):
        in_text = self.in_field.text()
        out_text = self.out_field.text()

        if not in_text:
            return  # Ha √ºres az In mez≈ë, ne csin√°ljon semmit

        # Sz√∂veg cser√©je a f≈ë sz√∂vegablakban
        parent = self.parent()
        if parent and isinstance(parent, CNCEditor):
            content = parent.text_edit.toPlainText()
            new_content = content.replace(in_text, out_text)
            parent.text_edit.setText(new_content)

        self.close()  # Ablak bez√°r√°sa csere ut√°n

class CNCHighlighter(QSyntaxHighlighter):
    """G-k√≥d szintaxiskiemel≈ë"""
    def __init__(self, parent=None):
        super().__init__(parent)
        self.rules = []

        self.add_rule(r'\bG\d*\b', QColor("#4DA6FF"))  # G-k√≥d √©s k√∂zvetlen ut√°na l√©v≈ë sz√°mok: vil√°gosk√©k
        self.add_rule(r'\bM\d*\b', QColor("#FF6666"))  # M-k√≥d √©s k√∂zvetlen ut√°na l√©v≈ë sz√°mok: vil√°gos piros
        self.add_rule(r'\bO\d+\b', QColor("#80FF80"))  # O-k√≥d (program kezdet): vil√°gosz√∂ld
        self.add_rule(r'\b[XYZIJKRFS]-?\d*\.?\d+\b', QColor("#FFFF99"))  # Koordin√°t√°k s√°rg√°n (negat√≠v is)

    def add_rule(self, pattern, color):
        """Szab√°ly hozz√°ad√°sa a szintaxiskiemel√©shez"""
        fmt = QTextCharFormat()
        fmt.setForeground(color)
        self.rules.append((re.compile(pattern), fmt))

    def highlightBlock(self, text):
        """Sz√∂veg kiemel√©se"""
        for pattern, fmt in self.rules:
            for match in pattern.finditer(text):
                start, end = match.span()
                self.setFormat(start, end - start, fmt)

# Program ind√≠t√°sa
if __name__ == "__main__":
    app = QApplication(sys.argv)
    editor = CNCEditor()
    editor.show()
    sys.exit(app.exec_())